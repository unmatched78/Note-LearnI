# Generated by Django 5.2.4 on 2025-08-07 08:14

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.indexes
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('clerk_id', models.CharField(blank=True, help_text='The Clerk-issued user identifier', max_length=255, null=True, unique=True, verbose_name='Clerk User ID')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('notes', models.TextField(blank=True, null=True)),
                ('file', models.ImageField(upload_to='documents/')),
                ('description', models.TextField(blank=True, null=True)),
                ('code', models.CharField(help_text='Unique code for the document', max_length=50, null=True, unique=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Notes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quiz_title', models.CharField(blank=True, db_index=True, help_text='Title of the quiz', max_length=200, null=True)),
                ('questions', models.JSONField(help_text='Quiz questions in JSON format')),
                ('document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.document')),
                ('generated_by', models.ForeignKey(help_text='User who triggered the quiz generation', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('code', models.CharField(help_text='Unique code for the module', max_length=50, null=True, unique=True)),
                ('created_by', models.ForeignKey(help_text='User who created the module', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('documents', models.ManyToManyField(blank=True, related_name='modules', to='core.document')),
                ('quiz', models.ManyToManyField(blank=True, help_text='Quizs associated with this module', related_name='modules', to='core.quiz')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuizAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('responses', models.JSONField(help_text='User responses for each question in JSON format')),
                ('score', models.IntegerField(default=0)),
                ('total_questions', models.IntegerField()),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.quiz')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FailedQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question_data', models.JSONField(help_text='Details of the failed question in JSON format')),
                ('selected_answer', models.JSONField(help_text="The student's incorrect answer in JSON format")),
                ('quiz_attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='failed_questions', to='core.quizattempt')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StudyEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Study Event',
                'ordering': ['-datetime'],
            },
        ),
        migrations.CreateModel(
            name='Summary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, db_index=True, help_text='Title of the summary', max_length=200, null=True)),
                ('length', models.CharField(max_length=20)),
                ('include_key_points', models.BooleanField(default=True)),
                ('focus_areas', models.TextField(blank=True)),
                ('snippet', models.CharField(blank=True, db_index=True, editable=False, help_text='First 100 chars of the summary for quick search', max_length=100, null=True)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='summaries', to='core.document')),
                ('generated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Transcript',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('media_url', models.URLField(blank=True, help_text='URL of the media file, thi swill be filled in case for a youtube video', null=True)),
                ('audio_file', models.FileField(blank=True, null=True, upload_to='transcripts/')),
                ('language', models.CharField(default='english', max_length=30)),
                ('speaker_identification', models.BooleanField(default=False)),
                ('transcript', models.TextField()),
                ('summary', models.TextField(blank=True, null=True)),
                ('title', models.CharField(blank=True, db_index=True, help_text='Title of the transcript set', max_length=200, null=True)),
                ('generated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('module', models.ManyToManyField(blank=True, related_name='transcripts', to='core.module')),
            ],
        ),
        migrations.CreateModel(
            name='FlashcardSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, db_index=True, help_text='Title of the flashcard set', max_length=200, null=True)),
                ('num_cards', models.PositiveIntegerField()),
                ('difficulty', models.CharField(max_length=20)),
                ('focus_topics', models.TextField(blank=True)),
                ('cards', models.JSONField()),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flashcard_sets', to='core.document')),
                ('generated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [django.contrib.postgres.indexes.GinIndex(fields=['cards'], name='flashcards_cards_gin', opclasses=['jsonb_path_ops'])],
            },
        ),
        migrations.AddIndex(
            model_name='quiz',
            index=django.contrib.postgres.indexes.GinIndex(fields=['questions'], name='quiz_questions_gin', opclasses=['jsonb_path_ops']),
        ),
        migrations.AddIndex(
            model_name='summary',
            index=django.contrib.postgres.indexes.GinIndex(fields=['content'], name='summary_content_gin', opclasses=['gin_trgm_ops']),
        ),
        migrations.AddIndex(
            model_name='transcript',
            index=django.contrib.postgres.indexes.GinIndex(fields=['transcript'], name='transcript_body_gin', opclasses=['gin_trgm_ops']),
        ),
    ]
